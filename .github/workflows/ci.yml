name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Python Backend Tests
  python-tests:
    name: Python Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"
        
    - name: Run code formatting check (black)
      run: |
        black --check --diff .
        
    - name: Run linting (pylint)
      run: |
        pylint src/ --output-format=colorized --ignore-paths=".*node_modules.*"
        
    - name: Run type checking (mypy)
      run: |
        mypy --install-types --non-interactive src/
        
    - name: Run tests with coverage
      run: |
        pytest --cov=src --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python-backend
        name: python-backend-coverage

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/apps/chat-lab/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: src/apps/chat-lab
      run: |
        npm ci --legacy-peer-deps
        
    - name: Run frontend linting
      working-directory: src/apps/chat-lab
      run: |
        npm run lint
        
    - name: Run frontend type checking
      working-directory: src/apps/chat-lab
      run: |
        npx tsc --noEmit
        
    - name: Run frontend unit tests
      working-directory: src/apps/chat-lab
      run: |
        npm test -- --passWithNoTests --watchAll=false --coverage --coverageReporters=text --coverageReporters=lcov
        
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: src/apps/chat-lab/coverage/lcov.info
        flags: frontend-tests
        name: frontend-coverage
        
    - name: Build frontend
      working-directory: src/apps/chat-lab
      run: |
        npm run build

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [python-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"
        
    - name: Run integration tests
      run: |
        # Add integration test commands here
        # For example:
        # pytest tests/integration/ -v
        echo "Integration tests placeholder - add your integration test commands here"
        
    - name: Test API endpoints
      run: |
        # Start the server in background and test endpoints
        # uvicorn src.fidu_vault.main:app --host 0.0.0.0 --port 8000 &
        # sleep 5
        # curl -f http://localhost:8000/health || exit 1
        echo "API endpoint tests placeholder - add your API test commands here"

  
  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions: write-all
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Bandit Scan
      uses: PyCQA/bandit-action@v1
      with: 
        targets: src/
        severity: medium
        confidence: medium
        
    - name: Run Safety check
      uses: pyupio/safety-action@v1
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}

  # Build Verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [python-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"
        cd src/apps/chat-lab && npm ci --legacy-peer-deps
        
    - name: Verify Python package builds
      run: |
        python -m pip install build
        python -m build
        
    - name: Verify frontend builds
      working-directory: src/apps/chat-lab
      run: |
        npm run build

  # Final Status Check
  status-check:
    name: All Tests Passed
    runs-on: ubuntu-latest
    # needs: [python-tests, frontend-tests, integration-tests, security-scan, build-verification]
    needs: [python-tests, frontend-tests, integration-tests, build-verification]
    if: always()
    
    steps:
    - name: Check if all jobs succeeded
    # TODO: re-add below when repo is public: "${{ needs.security-scan.result }}" == "success" && 
      run: |
        if [[ "${{ needs.python-tests.result }}" == "success" && 
              "${{ needs.frontend-tests.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" && 
              "${{ needs.build-verification.result }}" == "success" ]]; then
          echo "✅ All tests passed successfully!"
          exit 0
        else
          echo "❌ Some tests failed. Please check the logs above."
          exit 1
        fi 