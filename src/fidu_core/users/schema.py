"""User models for the FIDU system."""

from typing import Optional
from datetime import datetime
from pydantic import BaseModel, EmailStr, Field, ConfigDict


class UserBase(BaseModel):
    """Base user model with common fields"""

    email: EmailStr
    first_name: Optional[str] = None
    last_name: Optional[str] = None


class UserID(BaseModel):
    """User ID model. Decoupled for ordering purposes"""

    id: str = Field(..., description="User ID. Autogenerated. Read Only")


class User(UserBase, UserID):
    """User model publically exposed fields."""

    create_timestamp: Optional[datetime] = Field(
        default=None, description="Creation timestamp. Read Only"
    )
    update_timestamp: Optional[datetime] = Field(
        default=None, description="Last updated timestamp. Read Only"
    )

    model_config = ConfigDict(
        from_attributes=True,  # For ORM compatibility
        json_schema_extra={
            "example": {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "email": "user@example.com",
                "first_name": "John",
                "last_name": "Doe",
                "create_timestamp": "2024-01-01T00:00:00",
                "update_timestamp": "2024-01-01T00:00:00",
            }
        },
    )


class UserInternal(User):
    """Internal user model. This is the model that is used internally by the service layer.
    It includes the password hash, which is not exposed in the public user model."""

    password_hash: str

    model_config = ConfigDict(
        from_attributes=True,  # For ORM compatibility
    )


class CreateUserRequest(BaseModel):
    """Request model for creating a new user."""

    request_id: str = Field(..., description="Request ID for tracking")
    password: str = Field(
        ..., min_length=8, description="User's password (min 8 characters)"
    )
    user: UserBase = Field(..., description="User object to create")

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "request_id": "123e4567-e89b-12d3-a456-426614174000",
                "password": "password",
                "user": {
                    "email": "user@example.com",
                    "first_name": "John",
                    "last_name": "Doe",
                },
            }
        }
    )


class LoginRequest(BaseModel):
    """Request model for user login."""

    email: str = Field(..., description="User's email address")
    password: str = Field(..., description="User's password")

    model_config = ConfigDict(
        json_schema_extra={
            "example": {"email": "user@example.com", "password": "password123"}
        }
    )


class LoginResponse(BaseModel):
    """Response model for successful login."""

    access_token: str
    token_type: str = "bearer"
    user: User

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                "token_type": "bearer",
                "user": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "email": "user@example.com",
                    "first_name": "John",
                    "last_name": "Doe",
                    "create_timestamp": "2024-01-01T00:00:00",
                    "update_timestamp": "2024-01-01T00:00:00",
                },
            }
        }
    )
