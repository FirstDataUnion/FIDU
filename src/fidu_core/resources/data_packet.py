from dataclasses import dataclass, field
from datetime import datetime
import uuid
from typing import Optional
from pydantic import UUID4


@dataclass 
class PersonalData: # A basic initial representation of the user's personal data
    given_name: Optional[str] = None # First name
    family_name: Optional[str] = None # Last name
    additional_names: Optional[str] = None # Middle name(s)
    address: Optional[str] = None # Postal Address
    affiliation: Optional[str] = None # Organisation that the person is affiliated with
    birth_date: Optional[datetime] = None # Date of birth
    birth_place: Optional[str] = None # Place of birth
    gender: Optional[str] = None # Gender
    email: Optional[str] = None # Email address
    phone: Optional[str] = None # Phone number
    city: Optional[str] = None # City of residence
    state: Optional[str] = None # State of residence
    zip: Optional[str] = None # Zip code
    country: Optional[str] = None # Country of residence
    height: Optional[float] = None # Height in meters
    weight: Optional[float] = None # Weight in kilograms
    job_title: Optional[str] = None # Job title
    nationality: Optional[str] = None # Nationality
    pronouns: Optional[str] = None # Pronouns
    
@dataclass
class BrowsingData: # A basic initial representation of the user's browsing data
    url: Optional[str] = None # URL of the page the user is on
    title: Optional[str] = None # Title of the page the user is on
    description: Optional[str] = None # Description of the page the user is on
    keywords: Optional[str] = None # Keywords of the page the user is on
    category: Optional[str] = None # Category of the page the user is on
    tags: Optional[str] = None # Tags of the page the user is on
    language: Optional[str] = None # Language of the page the user is on
    country: Optional[str] = None # Country of the page the user is on

@dataclass
class DataPacket:
    request_id: UUID4  # Required UUID v4 for request tracking
    user_id: str  # Identifier for the user generating the data packet
    id: str = field(default_factory=lambda: str(uuid.uuid4()), metadata={'readOnly': True}) # ID for this particular data packet, autogenerated if left empty
    timestamp: datetime = field(default_factory=datetime.now)
    personal_data: PersonalData = field(default_factory=PersonalData)
    browsing_data: BrowsingData = field(default_factory=BrowsingData)