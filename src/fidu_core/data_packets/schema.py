"""Data Packet models the various data packets that are handled by FIDU"""

from typing import Optional, Union, Dict, Any, Literal
from datetime import datetime
import uuid
from pydantic import UUID4, BaseModel, Field


class NameInfo(BaseModel):
    """Basic name information for a person."""

    given_name: Optional[str] = None  # First name
    family_name: Optional[str] = None  # Last name
    additional_names: Optional[str] = None  # Middle name(s)
    pronouns: Optional[str] = None  # Pronouns


class BirthInfo(BaseModel):
    """Birth-related information."""

    birth_date: Optional[datetime] = None  # Date of birth
    birth_place: Optional[str] = None  # Place of birth
    nationality: Optional[str] = None  # Nationality


class ContactInfo(BaseModel):
    """Contact information."""

    email: Optional[str] = None  # Email address
    phone: Optional[str] = None  # Phone number
    address: Optional[str] = None  # Postal Address


class LocationInfo(BaseModel):
    """Geographic location information."""

    city: Optional[str] = None  # City of residence
    state: Optional[str] = None  # State of residence
    zip: Optional[str] = None  # Zip code
    country: Optional[str] = None  # Country of residence


class PhysicalInfo(BaseModel):
    """Physical characteristics."""

    height: Optional[float] = None  # Height in meters
    weight: Optional[float] = None  # Weight in kilograms
    gender: Optional[str] = (
        None  # Gender (TODO: I don't think this fits here, find a new home for it"?)
    )


class ProfessionalInfo(BaseModel):
    """Professional and organizational information."""

    job_title: Optional[str] = None  # Job title
    affiliation: Optional[str] = None  # Organisation that the person is affiliated with


class PersonalData(BaseModel):
    """A comprehensive representation of the user's personal data."""

    name: NameInfo = Field(default_factory=NameInfo)
    birth: BirthInfo = Field(default_factory=BirthInfo)
    contact: ContactInfo = Field(default_factory=ContactInfo)
    location: LocationInfo = Field(default_factory=LocationInfo)
    physical: PhysicalInfo = Field(default_factory=PhysicalInfo)
    professional: ProfessionalInfo = Field(default_factory=ProfessionalInfo)


class BrowsingData(BaseModel):
    """A basic initial representation of the user's browsing data."""

    url: Optional[str] = None
    title: Optional[str] = None
    description: Optional[str] = None
    keywords: Optional[str] = None
    category: Optional[str] = None
    language: Optional[str] = None


class StructuredDataPacket(BaseModel):
    """Container for structured user data packets."""

    type: Literal["structured"] = "structured"  # Discriminator field
    personal_data: PersonalData = Field(
        default_factory=PersonalData
    )  # TODO: this might want to default to None
    browsing_data: BrowsingData = Field(
        default_factory=BrowsingData
    )  # TODO: this might want to default to None


class UnstructuredDataPacket(BaseModel):
    """Container for unstructured user data packets."""

    type: Literal["unstructured"] = "unstructured"  # Discriminator field
    tags: list[str] = Field(default_factory=list)  # List of tags to categorize the data
    data: Dict[str, Any] = Field(
        default_factory=dict
    )  # Flexible JSON blob for unstructured data


class DataPacket(BaseModel):
    """Top-level container for all types of data packets."""

    user_id: str  # Identifier for the user generating the data packet
    id: str = Field(
        default_factory=lambda: str(uuid.uuid4())
    )  # ID for this particular data packet, autogenerated if left empty
    timestamp: datetime = Field(default_factory=datetime.now)
    packet: Union[StructuredDataPacket, UnstructuredDataPacket] = Field(
        # Tell Pydantic to use the 'type' field to discriminate, avoiding any
        # ambiguity between the two types
        discriminator="type"
    )


class DataPacketSubmissionRequest(BaseModel):
    """Request model for data Packet submission."""

    request_id: UUID4  # Required UUID v4 for request tracking
    data_packet: DataPacket  # The data packet to be submitted
